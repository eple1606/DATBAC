import asyncio
from collections import deque

# Dictionary to store the sliding windows for each device
sliding_windows = {}

# Global dictionary to store previous averages per device
previous_average = {}

# Define a threshold (in dBm) for significant change
THRESHOLD = 5.0


WINDOW_SIZE = 6

async def update_sliding_window(device_name, new_rssi):
    # If device sliding window doesn't exist, create one
    if device_name not in sliding_windows:
        sliding_windows[device_name] = deque(maxlen=WINDOW_SIZE)
    
    # Add the new RSSI to the device's sliding window
    sliding_windows[device_name].append(new_rssi)
    
    # Recalculate the average RSSI for the device
    avg_rssi = sum(sliding_windows[device_name]) / len(sliding_windows[device_name])
    print(f"[{device_name}] Updated Average RSSI: {avg_rssi:.2f} dBm")
    
    # Trigger clustering or alert event if necessary
    # For example, if avg_rssi has changed significantly:
    if abs(avg_rssi - previous_average) > THRESHOLD:
        await handle_significant_change(device_name, avg_rssi)

async def handle_significant_change(device_name, avg_rssi):
    # This function could update the clustering model or send alerts
    print(f"[ALERT] {device_name} shows significant RSSI change: {avg_rssi:.2f} dBm")
    # Insert clustering update logic or alert notification here

async def event_loop():
    # This is a placeholder for your main event loop
    # In a real system, events would be generated by your data capture process
    while True:
        # For demo: simulate receiving an event with a random RSSI value
        await update_sliding_window("Device 1", -60)  
        await asyncio.sleep(1)  # simulate delay between events

# Run the event loop
asyncio.run(event_loop())
